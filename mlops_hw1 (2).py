# -*- coding: utf-8 -*-
"""MLOps hw1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E3PWLgyvKy1vRyrFgBODrestHtQXxJt5
"""

!pip install pandas pyarrow

import pandas as pd
file_path = '/content/yellow_tripdata_2023-02.parquet'
df = pd.read_parquet(file_path, engine='pyarrow')

df.head()

df.shape

df['Duration'] = df['tpep_dropoff_datetime'] - df['tpep_pickup_datetime']

df

std_dev = df['Duration'].std()
std_dev

initial_count = len(df['Duration'])

initial_count

df['Duration_minutes'] = df['Duration'].dt.total_seconds() / 60

df_filtered = df[(df['Duration_minutes'] >= 1) & (df['Duration_minutes'] <= 60)]

after_count = len(df_filtered)
after_count

difference = ((after_count -initial_count )/initial_count) *100

difference

# Convert 'pickup_location_id' and 'dropoff_location_id' to strings
df_filtered['PULocationID'] = df_filtered['PULocationID'].astype(str)
df_filtered['DOLocationID'] = df_filtered['DOLocationID'].astype(str)

df_selected = df_filtered[['PULocationID', 'DOLocationID']]

# Convert the DataFrame to a list of dictionaries
data_dicts = df_selected.to_dict(orient='records')

df_selected

data_dicts

from sklearn.feature_extraction import DictVectorizer
dv = DictVectorizer(sparse=True)

# Fit the vectorizer and transform the data
feature_matrix = dv.fit_transform(data_dicts)

y = df_filtered['Duration_minutes']

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import numpy as np

model = LinearRegression()
model.fit(feature_matrix, y)

y_pred = model.predict(feature_matrix)

rmse = np.sqrt(mean_squared_error(y, y_pred))
print(f"RMSE on the training data: {rmse:.2f}")